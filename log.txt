9/5/16
 -
 -Since I am making my game with java, I had to choose a library to make the 2D. The library that I have been using for a while and have some experience is LWJGL (Light Weight Java Game Library). I started off with the base of some of my older code. Therefore, a considerable amount of errors that I would have had if I started off all completely from scratch. I also took some code from some tutorials when I was learning it. In some cases, I tweaked the code while in others it is impossible to not to take the code.
 -
 -On this day, I did two things. One of the earlier things I did was continue improving the collision detection. My collision detection runs off checking if the player collides with an entity (the box type of collision detection (This is where you test the edges of a square, and try not to allow them to collide)). The problem was that I could not check all of them very efficiently, so I changed it to this other method. This other method involved checking each entity for if they have collided with the player, then in the main game loop, if one of the entities is true, then the variable there becomes true. This variable within the game loop is then passed to the player, who stops its motion according to what variable is true.
 -Probably the largest thing I did on that day was the level part of the code. This involved making an interface for the levels, an abstract class and a plain Level that I called ‘Tutorial1’. In this is a very basic level. It includes (at the end of the day), a text (which I could not find), a player and an enemy. I had a few problems with this. One problem was that the texture for the background would not load. I had the problem for a while, but then I put the Method of getting the texture into the ‘LoadTexture’ class, and I called for it and it worked. I also had a problem with calling the entitles. I took all the entities from the main game loop that I had running earlier, so I know that it should work. I then took all the lines of code, copied it, quit the IDE, reopened it, pasted the code in and presto it works. I also added a LevelLoader. This level loader is just so that I have a means of choosing a level to setup, draw and destroy. It also has the capability of changing the Level from any area, although at the time I kept that just in comments.
 -
 -12/5/16 – 14/5/16
 -
 -This was a big set of improvements. The main thing was the movement of the player across the map. Since this is a top down game, the map may be larger than the screen which means the player has to be able to move around. So in 11/5/16, I started thinking about the movment in a top down game. What often happens is the player gets to half, and then the whole map moves. When it hits a corner, the map stops moving and the character can move himself. So at 12/5/16, I finally started coding it. I put in multiple different lines, both in the player and in the level itself. I constantly was trying/testing it by moving my player to the edges of where the player could possibly get to. I added multiple if statements and finally got it working for the level. I still had a bug where at any given moment, the player might be completely unable to move (did not find out why, will look into it at a future point). I then went through all my code, allowing it to work no matter the size of the level, and so that I did not have to hard code it into the final project (by hard code I mean set exact sizes that I would have to follow and not just variables where I can change at any given time). This last part I mainly did on 14/5/16.
 -The next big thing I did, was making the enemy take in any set of movement instructions. By this I mean I can give it instructions, depending on the level, to make it move in a variety of ways (especially irregular ways, that can exist depending on the levels requirements). To test out if it worked, I put various different paths, all varying in complexity. This created a problem which only came out while testing the collision detection. The collision detection system that I ran at during the testing involves four areas at each side. They are not very large, but are as wide as the enemy and cover 5 pixels out and 5 pixels in. The problem is that I had also put in a speed increment button, that makes the player move 10 pixels instead of 5 pixels, which means while checking for the player, it ends up with the player moving further in than the enemy can check, which allows the player to move through the enemy like it had no collision detection. If you thought that it should have caught the player going in even at fast because the detection space is 10 wide, then you forgot that the enemy is also moving, which means the player is moving 10 pixels towards it while the enemy moved 3 pixels towards the player, so there was a total of 13 pixels. To fix it I made larger area of detection by 5 (this was mainly because the original speed of movement of the enemy was 5). I tested out this new collision detection system by running or walking the player at the enemy in all different types of ways.
 -
 -16/5/16
 -
 -This was a slower day. I spent a considerable amount of the day thinking about the ‘seeing’ aspect of enemies, the title screen and the level selecting screen, although I have not started coding any of them out. What I did do was start working on was the exiting door of each level. This door would require a key to allow the player to open, or else the door would be closed. At first, I self-contained all of the code for the key and the door, but I decided to keep the key code separate in case that I do allow doors for other purposes other than just finishing the level. The reason why I said this was a slower day is because that was about all I did. I did fix some errors with the key, which rendered improperly (it turned out that I used the proper variables for one corner of the object, but used other variables for the other corner which made the shape turn out weird. Otherwise, I did nothing. 
 -
 -18/5/16
 -
 -Did some more programming of the Key and Doors
 -
 -BIG NEWS – GOING TO START FROM THE BEGINNING AND MAKE THE WHOLE THING NICER SINCE I KNOW WHERE I WANT IT TO GO
 -
 -19/5/16
 -
 -This day, I started all over again. I made the main game loop, the window maker/updater/destroyer, the player class, the enemy class and the general entity interface. I had no major errors because the majority of the code came from the original piece of code. I did have a few errors. These errors had to do with numbers values being larger or smaller than I wanted to have them. To solve those errors, I went through and ran the game, each time changing the values until I got the desired effect. The reason why I wanted to start all over again, was because on the first go at it, I was just adding things, but the original code was not made with those ideas in mind. This time, the structure of the code is more rigid and less errors should occur.
 -
 -20/5/16
 -
 -I continued working on my project. This time I added the Levels all over again, although this time I did not use any abstract classes. The whole Tutorial1 I just copied from my previous work. I made a new class called Walls. Walls is used for two things. The first thing, is for collisions within the map with walls. This is important since on the maps I have made, there are walls that I want seen, but the movement on the map forces it to be allowed to walk through. So now I set the x and y coordinates and tell it the width and height, and it stops the player from walking through it. The second thing is for something I have not started yet, but will in the future. It is for the guards looking at the player. I need it to check if a wall is in the way or not. Because if the wall is in the way then it cannot see the player. I also completely changed my collision detection system. Now it uses a Boolean array of 4 Booleans and gives it to the player class. If the player is too close to the enemy, the player completely disappears (because the player was caught). When I’m done with the walls, it will stop it from moving all four directions.
 -
 -21/5/16
 -
 -Finally, collision detection works completely. It took a couple of hours of work, but I got it to work. I had a few problems. The largest was these walls in the center react like they did not exist on two sides. I figured out that it happened because the Map movement was not affected by the collision detection, which means the player stayed at the center and the map moved with collision detection. Once I fixed that, I continued working.
 -
 -22/5/16
 -
 -Keys and Doors worked on. This mainly involved me creating two classes. The first class was used to make the door. It makes the door, then checks its position and the players position to see if the player is there. The second class is the key class. This is called by the door class. It draws the door, checks if the player is close enough to pick up the key, and returns whether or not it was taken. The door then takes whether the key has been taken, and changes the doors image. The level gives the door the door and keys position, and through the door, the key gets its position. I tried it out by putting the door and key in multiple different positions.
 -
 -23/5/16
 -
 -I have a problem. Today I made the Titlescreen. This a simple ‘level’ which is set up at the beginning through the level controller. It has nothing wrong with it. I also made a class that makes text (I had an error where instead of displaying text, it displays a box of the correct proportions. I solved this by putting the portion that sets it up within the draw method). The titlescreen worked like all my other levels, except that at the end if the start button was clicked, it would ask the level controller to change levels. But it only changes the level for one second and then changes back. I tried it with a thousand different methods. I also made the level controller draw, but all it does is draw for a second and then turns back to Titlescreen.
 -
 -24/5/16
 -
 -I did not have much time to work on my programming today, but I fixed the problem from yesterday. Thanks to Mr. Drenth (That probably is the person reading this document, other than myself), for saying that the levelcontroller has to know what state the level is at. I think I might have taken it a bit too seriously, but it works. I made it level have a string called ‘state’. From there the level controller gets it and reacts accordingly. No problems there. I tried a few different types of ‘states’, and they all worked fantastically.
 -
 -25/5/16
 -
 -Today was not like many of the other days. Today, I mainly did level designing. I used http://pyromancers.com/dungeon-painter-online/ to create the basic 20x20 maps. I then changed it to www.piskelapp.com, where I made it larger (968x968) then added a 32 pixel black border. I made three of these levels and then started a How To Play which I only started. No errors to mention.
 -
 -29/5/16
 -
 -I have not touched this over a long period of time. I mainly worked today on the how to play ‘level’ and the enemy’s observing and movement methods. Right now, I have a problem with the enemy observing the player to the left, and probably the right (I have not done the right side at the time of this issue). I'll mess around a bit and see if I can find out.
 -A bit more information for those who decide to read this and need to know more to solve the problem:
 -The enemy knows the players location along with all the walls. To find out if it should follow, I check if the player is in a rectangle in the direction he is going. It checks if there are any walls closer than the player and in its line of sight. If there are none, it then adds the player’s location to a value and starts moving towards at a speed faster than which the player goes at. It also saves its current location. If it loses the player, then it goes back to where it was, and the enemy goes through its rotations again. It can see the player if it is north or south of it, but for some reason did not work if it was to the left.
 -I have currently excluded the observations, leading to the program only having these blocks that will make you lose the level if you crash in to them. I will eventually get back to this, if I have time within the next two days.
 -
 -2/6/16
 -Today I have made the pause, lose and win menu. Other than that, I have done nothing.
 -Update: I have made a really quick mini-map, but it did not work. So right now, it’s not called but you can see the code for it.
 -
 -All the edits after this are able to be found after on the Github page.
 -
 -Tutorial For SlickUtil - http://www.ninjacave.com/slickutil1. 
 -
 -General Tutorials for LWJGL 2 - http://wiki.lwjgl.org/wiki/Main_Page
 -	 http://www.ninjacave.com/tutorials
 -	https://github.com/mattdesl/lwjgl-basics/wiki
 -				https://philphilphil.wordpress.com/tag/lwjgl/?order=ASC
 -	https://www.youtube.com/playlist?list=PL19F2453814E0E315&feature=view_all
 -	http://thecodinguniverse.com/lwjgl-tutorials/
 -						
 -Pathfinding - http://www.policyalmanac.org/games/aStarTutorial.htm
